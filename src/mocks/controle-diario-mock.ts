/**
 * Mock de Controle Di√°rio - Redireciona para API Real
 * Mantido como fallback em caso de erro
 */

import {
  listarRelacoesDiarias as apiListarRelacoesDiarias,
  criarRelacaoDiaria as apiCriarRelacaoDiaria,
  listarDiarias as apiListarDiarias,
  criarDiaria as apiCriarDiaria,
  atualizarDiaria as apiAtualizarDiaria,
  deletarDiaria as apiDeletarDiaria,
  getEstatisticasControleDiario as apiGetEstatisticas
} from '../lib/controle-diario-api';

// Flag para usar mock em caso de erro
const USE_MOCK_ON_ERROR = true;

// ==========================================
// RELA√á√ïES DI√ÅRIAS
// ==========================================

export const listarRelacoesDiarias = async () => {
  try {
    return await apiListarRelacoesDiarias();
  } catch (error) {
    console.error('Erro ao listar rela√ß√µes (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      return [];
    }
    throw error;
  }
};

export const criarRelacaoDiaria = async (relacao: any) => {
  try {
    return await apiCriarRelacaoDiaria(relacao);
  } catch (error) {
    console.error('Erro ao criar rela√ß√£o (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      const novaRelacao = {
        ...relacao,
        id: Date.now().toString(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      return novaRelacao;
    }
    throw error;
  }
};

// ==========================================
// DI√ÅRIAS
// ==========================================

export const listarRegistrosDiarias = async () => {
  try {
    return await apiListarDiarias();
  } catch (error) {
    console.error('Erro ao listar di√°rias (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      return [];
    }
    throw error;
  }
};

export const criarRegistroDiaria = async (registro: any) => {
  console.log('üì§ [criarRegistroDiaria] Tentando criar di√°ria:', registro);
  try {
    const resultado = await apiCriarDiaria(registro);
    console.log('‚úÖ [criarRegistroDiaria] Di√°ria criada com sucesso:', resultado);
    return resultado;
  } catch (error) {
    console.error('‚ùå [criarRegistroDiaria] Erro ao criar di√°ria:', error);
    console.error('üìã Detalhes do erro:', JSON.stringify(error, null, 2));
    if (USE_MOCK_ON_ERROR) {
      console.log('‚ö†Ô∏è [criarRegistroDiaria] Usando mock como fallback');
      const novoRegistro = {
        ...registro,
        id: Date.now().toString(),
        status_pagamento: 'pendente',
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      };
      console.log('üì¶ [criarRegistroDiaria] Mock criado:', novoRegistro);
      return novoRegistro;
    }
    throw error;
  }
};

export const atualizarRegistroDiaria = async (id: string, registro: any) => {
  try {
    return await apiAtualizarDiaria(id, registro);
  } catch (error) {
    console.error('Erro ao atualizar di√°ria (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      return registro;
    }
    throw error;
  }
};

export const deletarRegistroDiaria = async (id: string) => {
  try {
    await apiDeletarDiaria(id);
    return true;
  } catch (error) {
    console.error('Erro ao deletar di√°ria (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      return true;
    }
    throw error;
  }
};

// ==========================================
// ESTAT√çSTICAS
// ==========================================

export const getEstatisticasControleDiario = async () => {
  try {
    return await apiGetEstatisticas();
  } catch (error) {
    console.error('Erro ao buscar estat√≠sticas (usando mock):', error);
    if (USE_MOCK_ON_ERROR) {
      return {
        totalRelacoes: 0,
        totalPresencas: 0,
        totalAusencias: 0,
        totalFaltas: 0,
        totalAtestados: 0,
        totalMudancas: 0,
        totalDiarias: 0,
        valorTotalDiarias: 0,
        diariasPendentes: 0,
        valorPendente: 0
      };
    }
    throw error;
  }
};
